definitions:
  models.Artifacts:
    properties:
      group_json_name:
        type: string
      group_name:
        type: string
      group_values:
        items:
          properties:
            json_name:
              type: string
            name:
              type: string
            type:
              type: string
            value:
              type: string
          type: object
        type: array
    type: object
  models.Document:
    properties:
      content:
        type: string
      document_class:
        type: string
      document_created:
        type: string
      document_extension:
        type: string
      document_id:
        type: string
      document_modified:
        type: string
      document_name:
        type: string
      document_path:
        type: string
      document_permissions:
        type: integer
      document_size:
        type: integer
      document_ssdeep:
        type: string
      document_type:
        type: string
      embeddings:
        items:
          $ref: '#/definitions/models.Embeddings'
        type: array
      folder_id:
        type: string
      folder_path:
        type: string
      ocr_metadata:
        $ref: '#/definitions/models.OcrMetadata'
      quality_recognition:
        type: integer
    type: object
  models.Embeddings:
    properties:
      chunk_id:
        type: string
      text_chunk:
        type: string
      vector:
        items:
          type: number
        type: array
    type: object
  models.OcrMetadata:
    properties:
      artifacts:
        items:
          $ref: '#/definitions/models.Artifacts'
        type: array
      doc_type:
        type: string
      job_id:
        type: string
      pages_count:
        type: integer
      text:
        type: string
    type: object
  server.BadRequestForm:
    properties:
      message:
        example: Bad Request message
        type: string
      status:
        example: 400
        type: integer
    type: object
  server.DownloadFile:
    properties:
      bucket:
        example: test-bucket
        type: string
      file_name:
        example: test-file.docx
        type: string
    type: object
  server.FolderNameForm:
    properties:
      folder_name:
        example: test_folder
        type: string
    type: object
  server.HierarchyForm:
    properties:
      bucket:
        example: test-bucket
        type: string
      directory:
        example: test-folder/
        type: string
    type: object
  server.ResponseForm:
    properties:
      message:
        example: Done
        type: string
      status:
        example: 200
        type: integer
    type: object
  server.ServerErrorForm:
    properties:
      message:
        example: Server Error message
        type: string
      status:
        example: 503
        type: integer
    type: object
  server.WatcherDirectoriesForm:
    properties:
      paths:
        example:
        - ./indexer/test_folder
        items:
          type: string
        type: array
    type: object
info:
  contact: {}
paths:
  /hello/:
    get:
      description: Check service is available
      operationId: hello
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/server.ResponseForm'
        "503":
          description: Server does not available
          schema:
            $ref: '#/definitions/server.ServerErrorForm'
      summary: Hello
      tags:
      - hello
  /watcher/folders/:
    get:
      description: Get watched directories list
      operationId: folders-all
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            items:
              type: string
            type: array
        "503":
          description: Server does not available
          schema:
            $ref: '#/definitions/server.ServerErrorForm'
      summary: Get watched directories list
      tags:
      - watcher
  /watcher/folders/attach:
    post:
      consumes:
      - application/json
      description: Attach new directory to watcher
      operationId: folders-attach
      parameters:
      - description: File entity
        in: body
        name: jsonQuery
        required: true
        schema:
          $ref: '#/definitions/server.WatcherDirectoriesForm'
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/server.ResponseForm'
        "400":
          description: Bad Request message
          schema:
            $ref: '#/definitions/server.BadRequestForm'
        "503":
          description: Server does not available
          schema:
            $ref: '#/definitions/server.ServerErrorForm'
      summary: Attach new directory to watcher
      tags:
      - watcher
  /watcher/folders/create:
    post:
      description: Create folder to store documents
      operationId: folder-create
      parameters:
      - description: Folder name to create
        in: body
        name: jsonQuery
        required: true
        schema:
          $ref: '#/definitions/server.FolderNameForm'
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/server.ResponseForm'
        "400":
          description: Bad Request message
          schema:
            $ref: '#/definitions/server.BadRequestForm'
        "503":
          description: Server does not available
          schema:
            $ref: '#/definitions/server.ServerErrorForm'
      summary: Create folder to store documents
      tags:
      - files
  /watcher/folders/detach:
    post:
      consumes:
      - application/json
      description: Attach new directory to watcher
      operationId: folders-detach
      parameters:
      - description: Folder ids
        in: body
        name: jsonQuery
        required: true
        schema:
          $ref: '#/definitions/server.WatcherDirectoriesForm'
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/server.ResponseForm'
        "400":
          description: Bad Request message
          schema:
            $ref: '#/definitions/server.BadRequestForm'
        "503":
          description: Server does not available
          schema:
            $ref: '#/definitions/server.ServerErrorForm'
      summary: Attach new directory to watcher
      tags:
      - watcher
  /watcher/folders/download:
    post:
      consumes:
      - multipart/form
      description: Load file from watcher directory
      operationId: watcher-download
      parameters:
      - description: Download file form
        in: body
        name: jsonQuery
        required: true
        schema:
          $ref: '#/definitions/server.DownloadFile'
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/models.Document'
        "400":
          description: Bad Request message
          schema:
            $ref: '#/definitions/server.BadRequestForm'
        "503":
          description: Server does not available
          schema:
            $ref: '#/definitions/server.ServerErrorForm'
      summary: Load file from watcher directory
      tags:
      - watcher
  /watcher/folders/hierarchy:
    post:
      consumes:
      - multipart/form
      description: Get bucket fs hierarchy
      operationId: watcher-hierarchy
      parameters:
      - description: Hierarchy form
        in: body
        name: jsonQuery
        required: true
        schema:
          $ref: '#/definitions/server.HierarchyForm'
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/server.ResponseForm'
        "400":
          description: Bad Request message
          schema:
            $ref: '#/definitions/server.BadRequestForm'
        "503":
          description: Server does not available
          schema:
            $ref: '#/definitions/server.ServerErrorForm'
      summary: Get bucket fs hierarchy
      tags:
      - watcher
  /watcher/folders/remove:
    post:
      description: Remove folder
      operationId: folder-remove
      parameters:
      - description: Folder name to remove
        in: body
        name: jsonQuery
        required: true
        schema:
          $ref: '#/definitions/server.FolderNameForm'
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/server.ResponseForm'
        "400":
          description: Bad Request message
          schema:
            $ref: '#/definitions/server.BadRequestForm'
        "503":
          description: Server does not available
          schema:
            $ref: '#/definitions/server.ServerErrorForm'
      summary: Remove folder
      tags:
      - files
  /watcher/folders/update:
    post:
      consumes:
      - multipart/form
      description: Update file into watcher directory
      operationId: watcher-update
      parameters:
      - description: Files (multipart/form) to updated
        in: formData
        name: files
        required: true
        type: file
      - description: Bucket name to upload
        in: query
        name: bucket
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/server.ResponseForm'
        "400":
          description: Bad Request message
          schema:
            $ref: '#/definitions/server.BadRequestForm'
        "503":
          description: Server does not available
          schema:
            $ref: '#/definitions/server.ServerErrorForm'
      summary: Update file into watcher directory
      tags:
      - watcher
  /watcher/folders/upload:
    post:
      consumes:
      - multipart/form
      description: Upload file to watcher directory
      operationId: watcher-upload
      parameters:
      - description: Files multipart form
        in: formData
        name: files
        required: true
        type: file
      - description: Bucket name to upload
        in: query
        name: bucket
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/server.ResponseForm'
        "400":
          description: Bad Request message
          schema:
            $ref: '#/definitions/server.BadRequestForm'
        "503":
          description: Server does not available
          schema:
            $ref: '#/definitions/server.ServerErrorForm'
      summary: Upload file to watcher directory
      tags:
      - watcher
  /watcher/is-pause:
    get:
      description: Check does watcher has been paused
      operationId: is-watcher-pause
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/server.ResponseForm'
        "400":
          description: Bad Request message
          schema:
            $ref: '#/definitions/server.BadRequestForm'
        "503":
          description: Server does not available
          schema:
            $ref: '#/definitions/server.ServerErrorForm'
      summary: Check does watcher has been paused
      tags:
      - watcher
  /watcher/pause:
    get:
      description: Pause all watchers
      operationId: watcher-pause
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/server.ResponseForm'
        "400":
          description: Bad Request message
          schema:
            $ref: '#/definitions/server.BadRequestForm'
        "503":
          description: Server does not available
          schema:
            $ref: '#/definitions/server.ServerErrorForm'
      summary: Pause all watchers
      tags:
      - watcher
  /watcher/run:
    get:
      description: Run all watchers
      operationId: watcher-run
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/server.ResponseForm'
        "400":
          description: Bad Request message
          schema:
            $ref: '#/definitions/server.BadRequestForm'
        "503":
          description: Server does not available
          schema:
            $ref: '#/definitions/server.ServerErrorForm'
      summary: Run all watchers
      tags:
      - watcher
swagger: "2.0"
