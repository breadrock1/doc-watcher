// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/hello/": {
            "get": {
                "description": "Check service is available",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hello"
                ],
                "summary": "Hello",
                "operationId": "hello",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/server.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/folders/": {
            "get": {
                "description": "Get watched directories list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Get watched directories list",
                "operationId": "folders-all",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/server.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/folders/attach": {
            "post": {
                "description": "Attach new directory to watcher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Attach new directory to watcher",
                "operationId": "folders-attach",
                "parameters": [
                    {
                        "description": "File entity",
                        "name": "jsonQuery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.WatcherDirectoriesForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/server.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/server.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/folders/create": {
            "post": {
                "description": "Create folder to store documents",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Create folder to store documents",
                "operationId": "folder-create",
                "parameters": [
                    {
                        "description": "Folder name to create",
                        "name": "jsonQuery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.FolderNameForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/server.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/server.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/folders/detach": {
            "post": {
                "description": "Attach new directory to watcher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Attach new directory to watcher",
                "operationId": "folders-detach",
                "parameters": [
                    {
                        "description": "Folder ids",
                        "name": "jsonQuery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.WatcherDirectoriesForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/server.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/server.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/folders/download": {
            "post": {
                "description": "Load file from watcher directory",
                "consumes": [
                    "multipart/form"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Load file from watcher directory",
                "operationId": "watcher-download",
                "parameters": [
                    {
                        "description": "Download file form",
                        "name": "jsonQuery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DownloadFile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/models.Document"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/server.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/server.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/folders/hierarchy": {
            "post": {
                "description": "Get bucket fs hierarchy",
                "consumes": [
                    "multipart/form"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Get bucket fs hierarchy",
                "operationId": "watcher-hierarchy",
                "parameters": [
                    {
                        "description": "Hierarchy form",
                        "name": "jsonQuery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.HierarchyForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/server.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/server.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/folders/remove": {
            "post": {
                "description": "Remove folder",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Remove folder",
                "operationId": "folder-remove",
                "parameters": [
                    {
                        "description": "Folder name to remove",
                        "name": "jsonQuery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.FolderNameForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/server.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/server.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/folders/update": {
            "post": {
                "description": "Update file into watcher directory",
                "consumes": [
                    "multipart/form"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Update file into watcher directory",
                "operationId": "watcher-update",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Files (multipart/form) to updated",
                        "name": "files",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bucket name to upload",
                        "name": "bucket",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/server.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/server.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/folders/upload": {
            "post": {
                "description": "Upload file to watcher directory",
                "consumes": [
                    "multipart/form"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Upload file to watcher directory",
                "operationId": "watcher-upload",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Files multipart form",
                        "name": "files",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bucket name to upload",
                        "name": "bucket",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/server.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/server.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/is-pause": {
            "get": {
                "description": "Check does watcher has been paused",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Check does watcher has been paused",
                "operationId": "is-watcher-pause",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/server.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/server.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/pause": {
            "get": {
                "description": "Pause all watchers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Pause all watchers",
                "operationId": "watcher-pause",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/server.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/server.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/run": {
            "get": {
                "description": "Run all watchers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Run all watchers",
                "operationId": "watcher-run",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/server.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/server.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/server.ServerErrorForm"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Artifacts": {
            "type": "object",
            "properties": {
                "group_json_name": {
                    "type": "string"
                },
                "group_name": {
                    "type": "string"
                },
                "group_values": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "json_name": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "type": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "models.Document": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "document_class": {
                    "type": "string"
                },
                "document_created": {
                    "type": "string"
                },
                "document_extension": {
                    "type": "string"
                },
                "document_id": {
                    "type": "string"
                },
                "document_modified": {
                    "type": "string"
                },
                "document_name": {
                    "type": "string"
                },
                "document_path": {
                    "type": "string"
                },
                "document_permissions": {
                    "type": "integer"
                },
                "document_size": {
                    "type": "integer"
                },
                "document_ssdeep": {
                    "type": "string"
                },
                "document_type": {
                    "type": "string"
                },
                "embeddings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Embeddings"
                    }
                },
                "folder_id": {
                    "type": "string"
                },
                "folder_path": {
                    "type": "string"
                },
                "ocr_metadata": {
                    "$ref": "#/definitions/models.OcrMetadata"
                },
                "quality_recognition": {
                    "type": "integer"
                }
            }
        },
        "models.Embeddings": {
            "type": "object",
            "properties": {
                "chunk_id": {
                    "type": "string"
                },
                "text_chunk": {
                    "type": "string"
                },
                "vector": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "models.OcrMetadata": {
            "type": "object",
            "properties": {
                "artifacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Artifacts"
                    }
                },
                "doc_type": {
                    "type": "string"
                },
                "job_id": {
                    "type": "string"
                },
                "pages_count": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "server.BadRequestForm": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Bad Request message"
                },
                "status": {
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "server.DownloadFile": {
            "type": "object",
            "properties": {
                "bucket": {
                    "type": "string",
                    "example": "test-bucket"
                },
                "file_name": {
                    "type": "string",
                    "example": "test-file.docx"
                }
            }
        },
        "server.FolderNameForm": {
            "type": "object",
            "properties": {
                "folder_name": {
                    "type": "string",
                    "example": "test_folder"
                }
            }
        },
        "server.HierarchyForm": {
            "type": "object",
            "properties": {
                "bucket": {
                    "type": "string",
                    "example": "test-bucket"
                },
                "directory": {
                    "type": "string",
                    "example": "test-folder/"
                }
            }
        },
        "server.ResponseForm": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Done"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "server.ServerErrorForm": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Server Error message"
                },
                "status": {
                    "type": "integer",
                    "example": 503
                }
            }
        },
        "server.WatcherDirectoriesForm": {
            "type": "object",
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "./indexer/test_folder"
                    ]
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
