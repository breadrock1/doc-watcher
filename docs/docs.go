// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/watcher/attach": {
            "put": {
                "description": "Attach new directory to watcher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Attach new directory to watcher",
                "operationId": "folders-attach",
                "parameters": [
                    {
                        "description": "File entity",
                        "name": "jsonQuery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httpserv.AttachDirectoryForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/httpserv.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/httpserv.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/httpserv.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/processing/clean": {
            "post": {
                "description": "Clean processing documents",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Clean processing documents",
                "operationId": "clean-documents",
                "parameters": [
                    {
                        "description": "File names to clean processing status",
                        "name": "jsonQuery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httpserv.FetchDocumentsList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/httpserv.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/httpserv.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/httpserv.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/processing/fetch": {
            "post": {
                "description": "Load processing/unrecognized/done documents by names list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Fetch processing documents",
                "operationId": "fetch-documents",
                "parameters": [
                    {
                        "description": "File names to fetch processing status",
                        "name": "jsonQuery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httpserv.FetchDocumentsList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/watcher.ProcessingDocuments"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/httpserv.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/httpserv.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/run": {
            "get": {
                "description": "Run all watchers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Run all watchers",
                "operationId": "watcher-run",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/httpserv.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/httpserv.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/httpserv.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/stop": {
            "get": {
                "description": "Stop all watchers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Stop all watchers",
                "operationId": "watcher-stop",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/httpserv.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/httpserv.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/httpserv.ServerErrorForm"
                        }
                    }
                }
            }
        },
        "/watcher/{bucket}/detach": {
            "delete": {
                "description": "Attach new directory to watcher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "watcher"
                ],
                "summary": "Attach new directory to watcher",
                "operationId": "folders-detach",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ids",
                        "name": "bucket",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/httpserv.ResponseForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request message",
                        "schema": {
                            "$ref": "#/definitions/httpserv.BadRequestForm"
                        }
                    },
                    "503": {
                        "description": "Server does not available",
                        "schema": {
                            "$ref": "#/definitions/httpserv.ServerErrorForm"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httpserv.AttachDirectoryForm": {
            "type": "object",
            "properties": {
                "bucket_name": {
                    "type": "string",
                    "example": "test-folder"
                }
            }
        },
        "httpserv.BadRequestForm": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Bad Request message"
                },
                "status": {
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "httpserv.FetchDocumentsList": {
            "type": "object",
            "properties": {
                "file_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "test-file.docx"
                    ]
                }
            }
        },
        "httpserv.ResponseForm": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Done"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "httpserv.ServerErrorForm": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Server Error message"
                },
                "status": {
                    "type": "integer",
                    "example": 503
                }
            }
        },
        "watcher.ProcessingDocuments": {
            "type": "object",
            "properties": {
                "done": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "processing": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unrecognized": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
